from .spin_site import IsingSpinSite

class SpinModel(object):
    ''' Abstract base class for spin model'''
    pass

class IsingModel(SpinModel):
    '''Store the parameters of ising model, spin sites are generated by this class'''

    def __init__(self, interaction_strength=1.0):
        self.interaction_strength = interaction_strength

    def make_site(self, config=0, index=1):
        return IsingSpinSite(config=config, index=index)

    def get_config_int_energy(self, config1, config2, dist=1, factor=1.0):
        assert config1 in [-1,1]
        assert config2 in [-1,1]

        if isinstance(dist, float):
            assert dist > 0.0
            if dist <= 1.0:
                factor = 1.0
            else:
                factor = 0.0
        elif isinstance(dist, int):
            assert dist > 0
            if dist == 1:
                factor = 1.0
            else:
                factor = 0.0

        assert isinstance(factor, float)
        if config1 == config2:
            return factor*self.interaction_strength*1.0
        else:
            return -factor*self.interaction_strength*1.0


class XYModel(SpinModel):
    def __init__(self):
        pass

    def make_site(self):
        pass


class HubbardModel(SpinModel):
    def __init__(self):
        pass

    def make_site(self):
        pass
